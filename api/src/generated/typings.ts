/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import { connectionPluginCore, core } from "@nexus/schema";
import * as ctx from "../context";
import { ResourcePodcast } from "../fields/roots/podcast";
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    url<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.ScalarInputFieldConfig<
        core.GetGen3<"inputTypes", TypeName, FieldName>
      >,
    ): void; // "URL";
    datetime<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.ScalarInputFieldConfig<
        core.GetGen3<"inputTypes", TypeName, FieldName>
      >,
    ): void; // "DateTime";
    color<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.ScalarInputFieldConfig<
        core.GetGen3<"inputTypes", TypeName, FieldName>
      >,
    ): void; // "HexColorCode";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    url<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "URL";
    datetime<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "DateTime";
    color<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "HexColorCode";
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>,
    ): void;
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {}

export interface NexusGenRootTypes {
  Episode: {
    // root type
    duration: number; // Int!
    id: string; // ID!
    thumbnail: NexusGenRootTypes["PodcastImage"]; // PodcastImage!
    title: string; // String!
  };
  EpisodeEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes["Episode"]; // Episode!
  };
  PageInfo: {
    // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  };
  Podcast: ResourcePodcast;
  PodcastAuthor: {
    // root type
    fullname: string; // String!
  };
  PodcastColors: {
    // root type
    body: any; // HexColorCode!
    main: any; // HexColorCode!
    title: any; // HexColorCode!
  };
  PodcastEpisodes_Connection: {
    // root type
    edges?: Array<NexusGenRootTypes["EpisodeEdge"] | null> | null; // [EpisodeEdge]
    nodes: NexusGenRootTypes["Episode"][]; // [Episode!]!
    pageInfo: NexusGenRootTypes["PageInfo"]; // PageInfo!
  };
  PodcastImage: {
    // root type
    src: any; // URL!
  };
  PodcastPlayers: ResourcePodcast;
  Query: {};
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
  HexColorCode: any;
  URL: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {}

export interface NexusGenFieldTypes {
  Episode: {
    // field return type
    duration: number; // Int!
    id: string; // ID!
    thumbnail: NexusGenRootTypes["PodcastImage"]; // PodcastImage!
    title: string; // String!
  };
  EpisodeEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes["Episode"]; // Episode!
  };
  PageInfo: {
    // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  };
  Podcast: {
    // field return type
    author: NexusGenRootTypes["PodcastAuthor"]; // PodcastAuthor!
    categories: string[]; // [String!]!
    colors: NexusGenRootTypes["PodcastColors"] | null; // PodcastColors
    description: string; // String!
    episodes: NexusGenRootTypes["PodcastEpisodes_Connection"]; // PodcastEpisodes_Connection!
    lastBuild: any; // DateTime!
    link: any; // URL!
    players: NexusGenRootTypes["PodcastPlayers"]; // PodcastPlayers!
    thumbnail: NexusGenRootTypes["PodcastImage"]; // PodcastImage!
    title: string; // String!
    url: any; // URL!
  };
  PodcastAuthor: {
    // field return type
    fullname: string; // String!
  };
  PodcastColors: {
    // field return type
    body: any; // HexColorCode!
    main: any; // HexColorCode!
    title: any; // HexColorCode!
  };
  PodcastEpisodes_Connection: {
    // field return type
    edges: Array<NexusGenRootTypes["EpisodeEdge"] | null> | null; // [EpisodeEdge]
    nodes: NexusGenRootTypes["Episode"][]; // [Episode!]!
    pageInfo: NexusGenRootTypes["PageInfo"]; // PageInfo!
    totalCount: number; // Int!
  };
  PodcastImage: {
    // field return type
    src: any; // URL!
  };
  PodcastPlayers: {
    // field return type
    applePodcast: any; // URL!
    rss: any; // URL!
    spotify: any; // URL!
  };
  Query: {
    // field return type
    podcast: NexusGenRootTypes["Podcast"]; // Podcast!
  };
}

export interface NexusGenArgTypes {
  Podcast: {
    episodes: {
      // args
      after?: string | null; // String
      first: number; // Int!
    };
  };
  Query: {
    podcast: {
      // args
      url: string; // String!
    };
  };
}

export interface NexusGenAbstractResolveReturnTypes {}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames =
  | "Episode"
  | "EpisodeEdge"
  | "PageInfo"
  | "Podcast"
  | "PodcastAuthor"
  | "PodcastColors"
  | "PodcastEpisodes_Connection"
  | "PodcastImage"
  | "PodcastPlayers"
  | "Query";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames =
  | "Boolean"
  | "DateTime"
  | "Float"
  | "HexColorCode"
  | "ID"
  | "Int"
  | "String"
  | "URL";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ctx.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes["inputNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["scalarNames"];
  allOutputTypes:
    | NexusGenTypes["objectNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["unionNames"]
    | NexusGenTypes["interfaceNames"]
    | NexusGenTypes["scalarNames"];
  allNamedTypes:
    | NexusGenTypes["allInputTypes"]
    | NexusGenTypes["allOutputTypes"];
  abstractTypes: NexusGenTypes["interfaceNames"] | NexusGenTypes["unionNames"];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
}
